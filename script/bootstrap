#!/usr/bin/env bash

# Bootstrap all the things.

set -o errexit
set -o nounset
set -o pipefail

cd "$(dirname "$0")/.."

DOTFILES=$(pwd -P)
OS=$(uname -s)

info () {
  printf "\r\e[1m(\e[1;34m..\e[0;1m) %s\e[0m\n" "$1"
}

user () {
  printf "\r\e[1m(\e[1;33m??\e[0;1m) %s\e[0m\n" "$1"
}

okay () {
  printf "\r\e[1m(\e[1;32mok\e[0;1m) %s\e[0m\n" "$1"
}

fail () {
  printf "\r\e[1m(\e[1;31mxx\e[0;1m) %s\e[0m\n" "$1" && exit 1
}

setup_gitconfig () {
  local template="git/gitconfig.local.symlink.example"
  local path="git/gitconfig.local.symlink"

  local credentials
  local name
  local email

  if ! [ -f "$path" ]; then
    info "Setting up git config"

    if [ "$OS" == "Darwin" ]; then
      credentials="osxkeychain"
    else
      credentials="cache"
    fi

    user "- What is your GitHub author name?"
    read -r -e name

    user "- What is your GitHub author email?"
    read -r -e email

    sed \
      -e "s/AUTHORNAME/$name/g" \
      -e "s/AUTHOREMAIL/$email/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$credentials/g" \
      "$template" \
      > "$path"

    okay "Created $path"
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite=
  local backup=
  local skip=
  local action=

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local current
      local action

      current="$(readlink "$dst")"

      if [ "$current" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")). What do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, or [B]ackup all?"
        read -r -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      okay "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "$dst.backup"
      okay "moved $dst to $dst.backup"
    fi

    if [ "$skip" == "true" ]; then
      okay "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then # "false" or empty
    ln -s "$1" "$2"
    okay "linked $1 to $2"
  fi
}

install_dotfiles () {
  info "Setting up dotfiles"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  okay "Set up dotfiles"

  # stow --dotfiles --no-folding --verbose --dir="$DOTFILES" --target=~
}

install_software () {
  # If we're on a Mac, let's install Homebrew and other .
  if [ "$OS" == "Darwin" ]; then
    info "Installing dependencies"
    if source bin/dot | while read -r data; do info "$data"; done; then
      okay "Dependencies installed"
    else
      fail "Error installing dependencies"
    fi
  fi
}

setup_gitconfig
install_dotfiles
install_software

# ./homebrew/install.sh
#
# brew install gum
# brew install stow

printf "\n\e[1mDone.\e[0m\n"
