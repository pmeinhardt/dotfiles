snippet module "module _ exposing _" b
module ${1:`!p snip.rv = snip.basename`} exposing (${2:..})$0
endsnippet

snippet import "import _ exposing (_)" b
import $1 exposing (${2:..})$0
endsnippet

snippet case "case _ of _ -> _" b
case ${1:expression} of
	${2:value} ->
		${0:result}
endsnippet

snippet let "let _ = _ in _" b
let
	${1:variable} =
		${2:expression}
in
	${0:$1}
endsnippet

snippet main "main module" b
module Main exposing (init, main, subscriptions, update, view)

import Browser
import Html exposing (button, div, text)
import Html.Events exposing (onClick)
import Json.Decode as Decode


type alias Flags =
	Decode.Value


type alias Model =
	Int


type Msg
	= Increment
	| Decrement


init : Flags -> ( Model, Cmd Msg )
init flags =
	( 0, Cmd.none )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
	case msg of
		Increment ->
			( model + 1, Cmd.none )

		Decrement ->
			( model - 1, Cmd.none )


view : Model -> Browser.Document Msg
view model =
	{ title = "Hello"
	, body =
		[ div []
			[ button [ onClick Decrement ] [ text "-" ]
			, div [] [ text (String.fromInt model) ]
			, button [ onClick Increment ] [ text "+" ]
			]
		]
	}


subscriptions : Model -> Sub Msg
subscriptions model =
	Sub.none


main : Program Flags Model Msg
main =
	Browser.document
		{ view = view
		, init = init
		, update = update
		, subscriptions = subscriptions
		}$0
endsnippet
