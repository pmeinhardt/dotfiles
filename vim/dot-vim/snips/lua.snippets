# Lua

snippet #! "#!/usr/bin/env lua" b
#!/usr/bin/env lua
$0
endsnippet

snippet local "local _ = _" b
local ${1:x} = ${0:nil}
endsnippet

snippet local-decl "local _" b
local ${1:x}
endsnippet

snippet function "function _ (_) _ end" w
function ${1:f} (${2:arg})
	$0
end
endsnippet

snippet if "if _ then _ end" b
if ${1:true} then
	$0
end
endsnippet

snippet for "for _=_,_,_ do _ end" b
for ${1:i}=${2:init},${3:limit}${4:,step} do
	$0
end
endsnippet

snippet for-in "for _ in _ do _ end" b
for ${1:x} in ${2:iterable} do
	$0
end
endsnippet

snippet for-pairs "for _, _ in pairs(_) do _ end" b
for ${1:k}, ${2:v} in pairs(${3:table}) do
	$0
end
endsnippet

snippet while "while _ do _ end" b
while ${1:true} do
	$0
end
endsnippet

snippet repeat "repeat _ until _" b
repeat
	$0
until ${1:true}
endsnippet

snippet print "print(_)" w
print($0)
endsnippet

snippet stdin "io.stdin:lines()" w
io.stdin${0::lines()}
endsnippet

snippet open "io.open(_, _)" w
io.open(${1:"path"}, ${2:"r"})$0
endsnippet

# Busted

snippet context "context('_', function () _ end)" b
context("$1", function ()
	$0
end)
endsnippet

snippet describe "describe('_', function () _ end)" b
describe("$1", function ()
	$0
end)
endsnippet

snippet setup "setup(function () _ end)" b
setup(function ()
	$0
end)
endsnippet

snippet teardown "teardown(function () _ end)" b
teardown(function ()
	$0
end)
endsnippet

snippet before_each "before_each(function () _ end)" b
before_each(function ()
	$0
end)
endsnippet

snippet after_each "after_each(function () _ end)" b
after_each(function ()
	$0
end)
endsnippet

snippet it "it('_', function () _ end)" b
it("$1", function ()
	$0
end)
endsnippet

snippet assert "assert._(_)" b
assert.${1:are.equal}(${2:a, b})$0
endsnippet
