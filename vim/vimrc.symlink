" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
set nocompatible


""" Filetype Detection

filetype on                         " enable filetype detection
filetype indent on                  " enable filetype-specific indenting
filetype plugin on                  " enable filetype-specific plugins


""" Syntax Highlighting

syntax enable


""" General Configuration

set encoding=utf-8                  " set utf-8 encoding
set backspace=indent,eol,start      " allow backspacing over everything
set history=1000                    " store lots of :cmdline history
set showcmd                         " show incomplete cmds down the bottom
set showmode                        " show current mode down the bottom
set wildmenu                        " enable wildmenu for completion
set guicursor+=a:blinkon0           " disable cursor blink
set visualbell                      " silence
set report=0                        " tell us about changes
set nomodeline                      " disable modelines (security)

" To reload files changed outside vim, enable 'autoread'.
set autoread

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" set hidden

" Change leader to a comma. All \x commands turn into ,x.
" The mapleader has to be set before loading plugins.
" let mapleader = ','


""" Configure Backup and Swap Files

set noswapfile                      " not using swap files
set nobackup                        " no persistent backup
set writebackup                     " write a temporary backup file


""" Indentation

set autoindent                      " indent according to previous line
set smartindent                     " guess new line indentation level
set shiftwidth=2                    " auto-indent depth
set softtabstop=2                   " yep, two
set tabstop=4                       " real tabs are 4 spaces
set expandtab                       " no real tabs please!
set nosmarttab                      " fuck tabs


""" Formatting

set formatoptions+=j                " remove comment chars when joining lines
set nojoinspaces                    " only insert single space after '.', '?'
                                    " and '!' with join command

""" Visual Cues

set showmatch                       " brackets/braces that is
set matchtime=5                     " duration to show matching brace (1/10 sec)
set listchars=tab:▸\ ,trail:·,eol:¬ " chars for invisibles
set listchars+=precedes:<,extends:> " indicators for lines longer than window
set nolist                          " print non-printable characters


""" Searching and Replacing

set incsearch                       " perform incremental search
set ignorecase                      " ignore case when searching

if has('nvim')
  set inccommand=nosplit            " show substitution 'live' in all places
endif


""" Navigation

set ruler
set scrolloff=3                     " keep at least 3 lines above/below
set sidescrolloff=3                 " at least 3 columns left/right (w/ nowrap)


""" Splits

set splitbelow                      " put new window below the current one
set splitright                      " put new window right of the current one


""" Mappings

" Quick tab switching
nnoremap <tab> gt
nnoremap <s-tab> gT

" Jump to the first non-blank character of the line when pressing '0' on the
" first overall character of the line. Go back to the first one from any other
" position (which matches the default behavior for '0').
nnoremap <expr> 0 col('.') == 1 ? '^' : '0'
vnoremap <expr> 0 col('.') == 1 ? '^' : '0'

" Enter 'focus' mode
nnoremap <leader><cr> :Goyo<cr>
xnoremap <leader><cr> :Goyo<cr>

" Clear search highlighting until next search
nnoremap <leader><space> :nohlsearch<cr>

" Quick search
nnoremap <leader>a :Ack!<space>
xnoremap <leader>a ""y:Ack! <c-r>"

" Buffer search
nnoremap <leader>b :Buffers<cr>

" Dispatch (vim-projectionist)
nnoremap <leader>d :Dispatch<cr>

" Re-edit the current file (in case it changed outside of vim)
nnoremap <leader>e :edit<cr>

" Fix auto-fixable code issues
nnoremap <leader>f :ALEFix<cr>

" Open fugitive status window
nnoremap <leader>g :Git<cr>

" Quick help
nnoremap <leader>h :Helptags<cr>
xnoremap <leader>h ""y:Helptags<cr><c-\><c-n>""pA

" Toggle linting
nnoremap <leader>l :ALEToggle<cr>

" Paste from clipboard
nnoremap <leader>p "+p
xnoremap <leader>p "+p

" Close window
nnoremap <leader>q :q<cr>

" Strip trailing whitespace
nnoremap <leader>s :%s/\s\+$//gc<cr>

" Sort lines
xnoremap <leader>s :sort<cr>

" Write the current file
nnoremap <leader>w :w<cr>

" Write the current file if it changed and quit
nnoremap <leader>x :x<cr>

" Copy to clipboard
nnoremap <leader>yy "+yy
xnoremap <leader>y "+y

" Quick-jump to files
nnoremap <c-p> :GFiles --cached --exclude-standard --others<cr>


""" Colors

colorscheme base


""" Use vim-plug to manage vim bundles:

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-repeat'             " support '.' to repeat plugin maps
Plug 'tpope/vim-surround'           " mappings for quoting and parenthesizing
Plug 'tpope/vim-commentary'         " mappings for commenting and uncommenting
Plug 'tpope/vim-eunuch'             " sugar for UNIX shell commands, scripts
Plug 'tpope/vim-fugitive'           " wrapper for working with Git
Plug 'tpope/vim-rhubarb'            " fugitive plugin for GitHub integration
Plug 'tpope/vim-unimpaired'         " complementary pairs of mappings
Plug 'tpope/vim-vinegar'            " navigate directories and manage files
Plug 'tpope/vim-dispatch'           " asynchronously run commands, build, test
Plug 'tpope/vim-abolish'            " substitute multiple variants of a word
Plug 'tpope/vim-dadbod'             " talk to databases
Plug 'tpope/vim-apathy'             " set up path for a few file types
Plug 'tpope/vim-projectionist'      " project configuration

Plug 'junegunn/fzf'                 " fuzzy-find and open files
Plug 'junegunn/fzf.vim'             " ...
Plug 'mileszs/ack.vim'              " search in project files

Plug 'editorconfig/editorconfig-vim'

Plug 'mattn/emmet-vim'              " mappings for web development
Plug 'sheerun/vim-polyglot'         " language pack
Plug 'sirver/ultisnips'             " expand snippets
Plug 'dense-analysis/ale'           " linting, completion, LSP support

if has('nvim')
  Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'junegunn/goyo.vim'            " distraction-free writing
Plug 'mattn/vim-woke'               " detect non-inclusive language
Plug 'pmeinhardt/hmm'               " stand-up notes and joblogs

call plug#end()
