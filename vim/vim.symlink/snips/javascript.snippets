# JavaScript

snippet import "import _ from '_'" b
import $1 from '${2:$1}';
endsnippet

snippet const "const _ = _" b
const ${1:x} = $0;
endsnippet

snippet let "let _ = _" b
let ${1:x} = ${0:null};
endsnippet

snippet function "function _(_) { _ }" w
function $1($2) {
	$0
}
endsnippet

snippet async "async function _(_) { _ }" w
async function $1($2) {
	$0
}
endsnippet

snippet if "if (_) _" b
if (${1:true}) $0
endsnippet

snippet for "for (_; _; _) { _ }" b
for (${1}; ${2}; ${3}) {
	$0
}
endsnippet

snippet for-of "for (const _ of _) { _ }" b
for (const ${1:element} of ${2:iterable}) {
	$0
}
endsnippet

snippet for-await "for await (const _ of _) { _ }" b
for await (const ${1:element} of ${2:iterable}) {
	$0
}
endsnippet

snippet while "while (_) { _ }" b
while (${1:condition}) {
	$0
}
endsnippet

snippet console "console._(_)" b
console.${1:log}($2);$0
endsnippet

# Classes

snippet class "class _ { _ }" b
class ${1:A} {
	$0
}
endsnippet

snippet constructor "constructor(_) { super(_) }" b
constructor(${1:...args}) {
	super(${2:$1});$0
}
endsnippet

# Node.js

snippet #! "#!/usr/bin/env node" b
#!/usr/bin/env node
$0
endsnippet

snippet require "require(_)" w
require('$1')$0
endsnippet

snippet main "if (require.main === module)" b
if (require.main === module) $0
endsnippet

# Jest

snippet describe "describe('_', () => { _ })" b
describe('$1', () => {
	$0
});
endsnippet

snippet it "it('_', () => { _ })" b
it('$1', () => {
	$0
});
endsnippet

snippet expect "expect(_).to_(_)" b
expect(${1:expression}).to${2:Be}($0);
endsnippet

snippet beforeEach "beforeEach(() => { _ })" b
beforeEach(() => {
	$0
});
endsnippet

snippet beforeAll "beforeAll(() => { _ })" b
beforeAll(() => {
	$0
});
endsnippet

snippet afterEach "afterEach(() => { _ })" b
afterEach(() => {
	$0
});
endsnippet

snippet afterAll "afterAll(() => { _ })" b
afterAll(() => {
	$0
});
endsnippet

# ESLint

snippet "/* eslint" "eslint-disable" b
/* eslint-disable$0 */
endsnippet

snippet "// eslint" "eslint-disable-next-line" b
// eslint-disable-next-line$0
endsnippet

snippet "(.*[^\s]+.*)// eslint" "eslint-disable-line" r
`!p snip.rv = match.group(1)`// eslint-disable-line$0
endsnippet
