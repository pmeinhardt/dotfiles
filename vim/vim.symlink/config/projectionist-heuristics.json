{
  "package-lock.json": {
    "*": {
      "make": "TERM=dumb npm"
    },
    "**.test.*": {
      "dispatch": "TERM=dumb npm test {file}"
    }
  },

  "yarn.lock": {
    "*": {
      "make": "TERM=dumb yarn"
    },
    "**.test.*": {
      "dispatch": "TERM=dumb yarn test {file}"
    }
  },

  "package.json": {
    "*": {
      "console": "node"
    },
    "*.js": {
      "alternate": "{}.test.js",
      "type": "source"
    },
    "*.jsx": {
      "alternate": "{}.test.jsx",
      "type": "source",
      "template": [
        "import React from 'react';",
        "",
        "function {basename|camelcase|capitalize}() {open}",
        "  return null;",
        "{close}",
        "",
        "{basename|camelcase|capitalize}.propTypes = {open}{close};",
        "",
        "export default {basename|camelcase|capitalize};"
      ]
    },
    "*.ts": {
      "alternate": "{}.test.ts",
      "type": "source"
    },
    "*.tsx": {
      "alternate": "{}.test.tsx",
      "type": "source",
      "template": [
        "import React from 'react';",
        "",
        "export type Props = {open}{close};",
        "",
        "function {basename|camelcase|capitalize}(_: Props) {open}",
        "  return null;",
        "{close}",
        "",
        "export default {basename|camelcase|capitalize};"
      ]
    },
    "*.test.js": {
      "alternate": "{}.js",
      "type": "test",
      "template": [
        "import {basename|camelcase} from './{basename}';",
        "",
        "describe('{basename|camelcase}', () => {",
        "  // function subject(...args) {open}",
        "  //   return {basename}(...args);",
        "  // {close}",
        "});"
      ]
    },
    "*.test.jsx": {
      "alternate": "{}.jsx",
      "type": "test",
      "template": [
        "import React from 'react';",
        "// import {open} render {close} from '@testing-library/react';",
        "// import {open} shallow as render {close} from 'enzyme';",
        "",
        "import {basename|camelcase|capitalize} from './{basename}';",
        "",
        "describe('{basename|camelcase|capitalize}', () => {",
        "  function subject(overrides) {open}",
        "    const defaults = {open} /* provide defaults */ {close};",
        "    const props = {open} ...defaults, ...overrides {close};",
        "    return render(<{basename|camelcase|capitalize} {open}...props{close} />);",
        "  {close}",
        "});"
      ]
    },
    "*.test.ts": {
      "alternate": "{}.ts",
      "type": "test",
      "template": [
        "import {basename|camelcase} from './{basename}';",
        "",
        "describe('{basename|camelcase}', () => {",
        "  // function subject(...args) {open}",
        "  //   return {basename}(...args);",
        "  // {close}",
        "});"
      ]
    },
    "*.test.tsx": {
      "alternate": "{}.tsx",
      "type": "test",
      "template": [
        "import React from 'react';",
        "// import {open} render {close} from '@testing-library/react';",
        "// import {open} shallow as render {close} from 'enzyme';",
        "",
        "import type {open} Props {close} from './{basename}';",
        "import {basename|camelcase|capitalize} from './{basename}';",
        "",
        "describe('{basename|camelcase|capitalize}', () => {",
        "  function subject(overrideProps: Partial<Props>) {open}",
        "    const defaultProps: Props = {open} /* provide defaults */ {close};",
        "    const props = {open} ...defaultProps, ...overrideProps {close};",
        "    return render(<{basename|camelcase|capitalize} {open}...props{close} />);",
        "  {close}",
        "});"
      ]
    }
  },

  "elm.json": {
    "src/*.elm": {
      "type": "source",
      "template": [
        "module {dot} exposing (..)"
      ]
    }
  },

  "mix.exs": {
    "*": {
      "console": "iex -S mix",
      "make": "mix"
    },
    "lib/*.ex": {
      "alternate": "test/{}_test.exs",
      "type": "source",
      "template": [
        "defmodule {camelcase|capitalize|dot} do",
        "end"
      ]
    },
    "test/*_test.exs": {
      "alternate": "lib/{}.ex",
      "type": "test",
      "dispatch": "mix test {file}",
      "template": [
        "defmodule {camelcase|capitalize|dot}Test do",
        "  use ExUnit.Case, async: true",
        "",
        "  alias {camelcase|capitalize|dot}",
        "end"
      ]
    }
  }
}
